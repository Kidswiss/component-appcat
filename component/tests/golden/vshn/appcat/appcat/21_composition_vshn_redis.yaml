apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  annotations:
    argocd.argoproj.io/sync-options: SkipDryRunOnMissingResource=true
    argocd.argoproj.io/sync-wave: '10'
    metadata.appcat.vshn.io/description: Redis instances by VSHN
    metadata.appcat.vshn.io/displayname: Redis by VSHN
    metadata.appcat.vshn.io/end-user-docs-url: https://vs.hn/vshn-redis
    metadata.appcat.vshn.io/flavor: standalone
    metadata.appcat.vshn.io/plans: '{"plus-1":{"note":"Will be scheduled on APPUiO
      Cloud plus nodes","scheduling":{"nodeSelector":{"appuio.io/node-class":"plus"}},"size":{"cpu":"250m","disk":"16Gi","enabled":true,"memory":"1Gi"}},"plus-2":{"note":"Will
      be scheduled on APPUiO Cloud plus nodes","scheduling":{"nodeSelector":{"appuio.io/node-class":"plus"}},"size":{"cpu":"500m","disk":"16Gi","enabled":true,"memory":"2Gi"}},"plus-4":{"note":"Will
      be scheduled on APPUiO Cloud plus nodes","scheduling":{"nodeSelector":{"appuio.io/node-class":"plus"}},"size":{"cpu":"1","disk":"16Gi","enabled":true,"memory":"4Gi"}},"plus-512m":{"note":"Will
      be scheduled on APPUiO Cloud plus nodes","scheduling":{"nodeSelector":{"appuio.io/node-class":"plus"}},"size":{"cpu":"125m","disk":"16Gi","enabled":true,"memory":"512Mi"}},"standard-1":{"size":{"cpu":"250m","disk":"16Gi","enabled":true,"memory":"1Gi"}},"standard-2":{"size":{"cpu":"500m","disk":"16Gi","enabled":true,"memory":"2Gi"}},"standard-4":{"size":{"cpu":"1","disk":"16Gi","enabled":true,"memory":"4Gi"}},"standard-512m":{"size":{"cpu":"125m","disk":"16Gi","enabled":true,"memory":"512Mi"}}}'
    metadata.appcat.vshn.io/product-description: https://products.docs.vshn.ch/products/appcat/redis.html
    metadata.appcat.vshn.io/zone: rma1
  labels:
    metadata.appcat.vshn.io/offered: 'true'
    metadata.appcat.vshn.io/serviceID: vshn-redis
    name: vshnredis.vshn.appcat.vshn.io
  name: vshnredis.vshn.appcat.vshn.io
spec:
  compositeTypeRef:
    apiVersion: vshn.appcat.vshn.io/v1
    kind: XVSHNRedis
  functions:
    - config:
        apiVersion: v1
        data:
          bucketRegion: lpg
          controlNamespace: syn-appcat-control
          imageTag: v4.41.1
          maintenanceSA: helm-based-service-maintenance
          quotasEnabled: 'false'
          restoreSA: redisrestoreserviceaccount
        kind: ConfigMap
        metadata:
          labels:
            name: xfn-config
          name: xfn-config
      container:
        image: redis
        imagePullPolicy: IfNotPresent
        runner:
          endpoint: unix-abstract:crossplane/fn/default.sock
        timeout: 20s
      name: redis-func
      type: Container
  resources:
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Namespace
              metadata:
                labels:
                  appcat.vshn.io/claim-namespace: ''
                  appcat.vshn.io/servicename: redis-standalone
                  appuio.io/billing-name: appcat-redis
                  appuio.io/no-rbac-creation: 'true'
                name: ''
          managementPolicy: Observe
          providerConfigRef:
            name: kubernetes
      name: ns-observer
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: ns-observer-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: status.atProvider.manifest.metadata.labels[appuio.io/organization]
          toFieldPath: metadata.labels[appuio.io/organization]
          type: ToCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata:
          name: prometheusrule
        spec:
          forProvider:
            manifest:
              metadata:
                apiVersion: monitoring.coreos.com/v1
                kind: PrometheusRule
                name: redis-rules
              spec:
                groups:
                  - name: redis-general-alerts
                    rules:
                      - alert: redisPersistentVolumeFillingUp
                        annotations:
                          description: The volume claimed by the instance {{ $labels.name
                            }} in namespace {{ $labels.label_appcat_vshn_io_claim_namespace
                            }} is only {{ $value | humanizePercentage }} free.
                          runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumefillingup
                          summary: PersistentVolume is filling up.
                        expr: label_replace( bottomk(1, (kubelet_volume_stats_available_bytes{job="kubelet",
                          metrics_path="/metrics"} / kubelet_volume_stats_capacity_bytes{job="kubelet",
                          metrics_path="/metrics"}) < 0.03 and kubelet_volume_stats_used_bytes{job="kubelet",
                          metrics_path="/metrics"} > 0 unless on(namespace, persistentvolumeclaim)
                          kube_persistentvolumeclaim_access_mode{ access_mode="ReadOnlyMany"}
                          == 1 unless on(namespace, persistentvolumeclaim) kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"}
                          == 1) * on(namespace) group_left(label_appcat_vshn_io_claim_namespace)
                          kube_namespace_labels, "name", "$1", "namespace", "vshn-redis-(.+)-.+")
                        for: 1m
                        labels:
                          severity: critical
                          syn_team: schedar
                        name: redis-storage
                      - alert: redisPersistentVolumeFillingUp
                        annotations:
                          description: Based on recent sampling, the volume claimed
                            by the instance {{ $labels.name }} in namespace {{ $labels.label_appcat_vshn_io_claim_namespace
                            }} is expected to fill up within four days. Currently
                            {{ $value | humanizePercentage }} is available.
                          runbook_url: https://runbooks.prometheus-operator.dev/runbooks/kubernetes/kubepersistentvolumefillingup
                          summary: PersistentVolume is filling up.
                        expr: label_replace( bottomk(1, (kubelet_volume_stats_available_bytes{job="kubelet",
                          metrics_path="/metrics"} / kubelet_volume_stats_capacity_bytes{job="kubelet",
                          metrics_path="/metrics"}) < 0.15 and kubelet_volume_stats_used_bytes{job="kubelet",
                          metrics_path="/metrics"} > 0 and predict_linear(kubelet_volume_stats_available_bytes{job="kubelet",
                          metrics_path="/metrics"}[6h], 4 * 24 * 3600) < 0  unless
                          on(namespace, persistentvolumeclaim) kube_persistentvolumeclaim_access_mode{
                          access_mode="ReadOnlyMany"} == 1 unless on(namespace, persistentvolumeclaim)
                          kube_persistentvolumeclaim_labels{label_excluded_from_alerts="true"}
                          == 1) * on(namespace) group_left(label_appcat_vshn_io_claim_namespace)
                          kube_namespace_labels, "name", "$1", "namespace", "vshn-redis-(.+)-.+")
                        for: 1h
                        labels:
                          severity: warning
                      - alert: redisMemoryCritical
                        annotations:
                          description: |-
                            The memory claimed by the instance {{ $labels.name }} in namespace {{ $labels.label_appcat_vshn_io_claim_namespace }} has been over 90% for 2 hours.
                              Please reducde the load of this instance, or increase the memory.
                          summary: Memory usage critical
                        expr: label_replace( topk(1, (container_memory_working_set_bytes{container="redis"}  /
                          on(container,pod,namespace)  kube_pod_container_resource_limits{resource="memory"}
                          * 100) > 90) * on(namespace) group_left(label_appcat_vshn_io_claim_namespace)
                          kube_namespace_labels, "name", "$1", "namespace", "vshn-redis-(.+)-.+")
                        for: 120m
                        labels:
                          severity: warning
                          syn_team: schedar
                        name: redis-memory
          providerConfigRef:
            name: kubernetes
      name: prometheusrule
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-prometheusrule'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Namespace
              metadata:
                labels:
                  appcat.vshn.io/claim-namespace: ''
                  appcat.vshn.io/servicename: redis-standalone
                  appuio.io/billing-name: appcat-redis
                  appuio.io/no-rbac-creation: 'true'
                name: ''
          providerConfigRef:
            name: kubernetes
      name: namespace-conditions
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.namespaceConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.manifest.metadata.labels[appcat.vshn.io/claim-namespace]
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[appuio.io/organization]
          toFieldPath: spec.forProvider.manifest.metadata.labels[appuio.io/organization]
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.name
          toFieldPath: status.instanceNamespace
          type: ToCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: rbac.authorization.k8s.io/v1
              kind: RoleBinding
              metadata:
                name: appcat:services:read
              roleRef:
                apiGroup: rbac.authorization.k8s.io
                kind: ClusterRole
                name: appcat:services:read
              subjects:
                - apiGroup: rbac.authorization.k8s.io
                  kind: Group
                  name: organization
          providerConfigRef:
            name: kubernetes
      name: namespace-permissions
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-service-rolebinding'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[appuio.io/organization]
          toFieldPath: spec.forProvider.manifest.subjects[0].name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: Issuer
              metadata:
                name: ''
                namespace: ''
              spec:
                selfSigned:
                  crlDistributionPoints: []
          providerConfigRef:
            name: kubernetes
      name: self-signed-issuer
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.selfSignedIssuerConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-selfsigned-issuer'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-selfsigned-issuer'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: Issuer
              metadata:
                name: ''
                namespace: ''
              spec:
                ca:
                  secretName: tls-ca-certificate
          providerConfigRef:
            name: kubernetes
      name: local-ca
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.localCAConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-ca-issuer'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-ca-issuer'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: ''
                namespace: ''
              spec:
                dnsNames: []
                duration: 87600h
                isCA: true
                issuerRef:
                  group: cert-manager.io
                  kind: Issuer
                  name: ''
                privateKey:
                  algorithm: RSA
                  encoding: PKCS1
                  size: 4096
                renewBefore: 2400h
                secretName: tls-ca-certificate
                subject:
                  organizations:
                    - vshn-appcat-ca
          providerConfigRef:
            name: kubernetes
      name: certificate
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.caCertificateConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-ca-certificate'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-ca'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.issuerRef.name
          transforms:
            - string:
                fmt: '%s-selfsigned-issuer'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: redis-headless.vshn-redis-%s.svc.cluster.local
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.dnsNames[0]
          type: CombineFromComposite
        - combine:
            strategy: string
            string:
              fmt: redis-headless.vshn-redis-%s.svc
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.dnsNames[1]
          type: CombineFromComposite
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: ''
                namespace: ''
              spec:
                dnsNames: []
                duration: 87600h
                isCA: false
                issuerRef:
                  group: cert-manager.io
                  kind: Issuer
                  name: ''
                privateKey:
                  algorithm: RSA
                  encoding: PKCS1
                  size: 4096
                renewBefore: 2400h
                secretName: tls-server-certificate
                subject:
                  organizations:
                    - vshn-appcat-server
                usages:
                  - server auth
                  - client auth
          providerConfigRef:
            name: kubernetes
      name: server-certificate
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.serverCertificateConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-server-certificate'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-server'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.issuerRef.name
          transforms:
            - string:
                fmt: '%s-ca-issuer'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: redis-headless.vshn-redis-%s.svc.cluster.local
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.dnsNames[0]
          type: CombineFromComposite
        - combine:
            strategy: string
            string:
              fmt: redis-headless.vshn-redis-%s.svc
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.dnsNames[1]
          type: CombineFromComposite
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: cert-manager.io/v1
              kind: Certificate
              metadata:
                name: ''
                namespace: ''
              spec:
                dnsNames: []
                duration: 87600h
                isCA: false
                issuerRef:
                  group: cert-manager.io
                  kind: Issuer
                  name: ''
                privateKey:
                  algorithm: RSA
                  encoding: PKCS1
                  size: 4096
                renewBefore: 2400h
                secretName: tls-client-certificate
                subject:
                  organizations:
                    - vshn-appcat-client
                usages:
                  - client auth
          providerConfigRef:
            name: kubernetes
      name: client-certificate
      patches:
        - fromFieldPath: status.conditions
          toFieldPath: status.clientCertificateConditions
          type: ToCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-client-certificate'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-client'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.issuerRef.name
          transforms:
            - string:
                fmt: '%s-ca-issuer'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: redis-headless.vshn-redis-%s.svc.cluster.local
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.dnsNames[0]
          type: CombineFromComposite
        - combine:
            strategy: string
            string:
              fmt: redis-headless.vshn-redis-%s.svc
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.spec.dnsNames[1]
          type: CombineFromComposite
    - base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        metadata: {}
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Secret
              metadata: {}
              stringData:
                REDIS_HOST: ''
                REDIS_PORT: '6379'
                REDIS_USERNAME: default
          providerConfigRef:
            name: kubernetes
          references:
            - patchesFrom:
                apiVersion: v1
                fieldPath: data.redis-password
                kind: Secret
                name: redis
                namespace: ''
              toFieldPath: data.REDIS_PASSWORD
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[ca.crt]
                kind: Secret
                name: tls-client-certificate
                namespace: ''
              toFieldPath: data[ca.crt]
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[tls.crt]
                kind: Secret
                name: tls-client-certificate
                namespace: ''
              toFieldPath: data[tls.crt]
            - patchesFrom:
                apiVersion: v1
                fieldPath: data[tls.key]
                kind: Secret
                name: tls-client-certificate
                namespace: ''
              toFieldPath: data[tls.key]
          writeConnectionSecretToRef:
            name: redis
            namespace: ''
      connectionDetails:
        - fromConnectionSecretKey: ca.crt
          name: ca.crt
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: tls.crt
          name: tls.crt
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: tls.key
          name: tls.key
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: REDIS_HOST
          name: REDIS_HOST
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: REDIS_PORT
          name: REDIS_PORT
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: REDIS_USERNAME
          name: REDIS_USERNAME
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: REDIS_PASSWORD
          name: REDIS_PASSWORD
          type: FromConnectionSecretKey
        - fromConnectionSecretKey: REDIS_URL
          name: REDIS_URL
          type: FromConnectionSecretKey
      name: connection
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: redis-headless.vshn-redis-%s.svc.cluster.local
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.stringData.REDIS_HOST
          type: CombineFromComposite
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[0].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[1].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[2].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.references[3].patchesFrom.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.writeConnectionSecretToRef.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
            - string:
                fmt: '%s-connection'
                type: Format
              type: string
          type: FromCompositeFieldPath
    - base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        spec:
          forProvider:
            chart:
              name: redis
              repository: https://charts.bitnami.com/bitnami
              version: 17.7.1
            values:
              architecture: standalone
              commonConfiguration: ''
              fullnameOverride: redis
              global:
                imageRegistry: ''
              image:
                repository: bitnami/redis
              master:
                containerSecurityContext:
                  enabled: true
                persistence:
                  size: ''
                podSecurityContext:
                  enabled: true
                resources:
                  limits:
                    cpu: ''
                    memory: ''
                  requests:
                    cpu: ''
                    memory: ''
              metrics:
                containerSecurityContext:
                  enabled: true
                enabled: true
                extraEnvVars:
                  - name: REDIS_EXPORTER_SKIP_TLS_VERIFICATION
                    value: 'true'
                  - name: REDIS_EXPORTER_INCL_SYSTEM_METRICS
                    value: 'true'
                serviceMonitor:
                  enabled: true
                  namespace: ''
              networkPolicy:
                allowExternal: false
                enabled: true
                extraIngress:
                  - from:
                      - namespaceSelector:
                          matchLabels:
                            kubernetes.io/metadata.name: appcat-slos
                ingressNSMatchLabels:
                  kubernetes.io/metadata.name: ''
              tls:
                authClients: true
                autoGenerated: false
                certCAFilename: ca.crt
                certFilename: tls.crt
                certKeyFilename: tls.key
                enabled: true
                existingSecret: tls-server-certificate
          providerConfigRef:
            name: helm
      name: release
      patches:
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.manifest.metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
          toFieldPath: spec.forProvider.values.networkPolicy.ingressNSMatchLabels[kubernetes.io/metadata.name]
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.plan
          toFieldPath: spec.forProvider.values.master.resources.requests.memory
          transforms:
            - map:
                plus-1: 1Gi
                plus-2: 2Gi
                plus-4: 4Gi
                plus-512m: 512Mi
                standard-1: 1Gi
                standard-2: 2Gi
                standard-4: 4Gi
                standard-512m: 512Mi
              type: map
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.plan
          toFieldPath: spec.forProvider.values.master.resources.limits.memory
          transforms:
            - map:
                plus-1: 1Gi
                plus-2: 2Gi
                plus-4: 4Gi
                plus-512m: 512Mi
                standard-1: 1Gi
                standard-2: 2Gi
                standard-4: 4Gi
                standard-512m: 512Mi
              type: map
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.memoryRequests
          toFieldPath: spec.forProvider.values.master.resources.requests.memory
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.memoryLimits
          toFieldPath: spec.forProvider.values.master.resources.limits.memory
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.plan
          toFieldPath: spec.forProvider.values.master.resources.requests.cpu
          transforms:
            - map:
                plus-1: 250m
                plus-2: 500m
                plus-4: '1'
                plus-512m: 125m
                standard-1: 250m
                standard-2: 500m
                standard-4: '1'
                standard-512m: 125m
              type: map
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.plan
          toFieldPath: spec.forProvider.values.master.resources.limits.cpu
          transforms:
            - map:
                plus-1: 250m
                plus-2: 500m
                plus-4: '1'
                plus-512m: 125m
                standard-1: 250m
                standard-2: 500m
                standard-4: '1'
                standard-512m: 125m
              type: map
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.cpuRequests
          toFieldPath: spec.forProvider.values.master.resources.requests.cpu
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.cpuLimits
          toFieldPath: spec.forProvider.values.master.resources.limits.cpu
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.plan
          toFieldPath: spec.forProvider.values.master.persistence.size
          transforms:
            - map:
                plus-1: 16Gi
                plus-2: 16Gi
                plus-4: 16Gi
                plus-512m: 16Gi
                standard-1: 16Gi
                standard-2: 16Gi
                standard-4: 16Gi
                standard-512m: 16Gi
              type: map
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.disk
          toFieldPath: spec.forProvider.values.master.persistence.size
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.tls.enabled
          toFieldPath: spec.forProvider.values.tls.enabled
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.tls.authClients
          toFieldPath: spec.forProvider.values.tls.authClients
          type: FromCompositeFieldPath
        - fromFieldPath: metadata.labels[crossplane.io/composite]
          toFieldPath: spec.forProvider.values.metrics.serviceMonitor.namespace
          transforms:
            - string:
                fmt: vshn-redis-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.size.plan
          toFieldPath: spec.forProvider.values.master.nodeSelector
          transforms:
            - map:
                plus-1:
                  appuio.io/node-class: plus
                plus-2:
                  appuio.io/node-class: plus
                plus-4:
                  appuio.io/node-class: plus
                plus-512m:
                  appuio.io/node-class: plus
                standard-1: {}
                standard-2: {}
                standard-4: {}
                standard-512m: {}
              type: map
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.scheduling.nodeSelector
          toFieldPath: spec.forProvider.values.master.nodeSelector
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.service.redisSettings
          toFieldPath: spec.forProvider.values.commonConfiguration
          type: FromCompositeFieldPath
        - combine:
            strategy: string
            string:
              fmt: vshn.appcat.vshn.io/v1/VSHNRedis/%s/%s
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
              - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.values.commonAnnotations[appcat.vshn.io/forward-events-to]
          type: CombineFromComposite
        - combine:
            strategy: string
            string:
              fmt: vshn.appcat.vshn.io/v1/VSHNRedis/%s/%s
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
              - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.values.master.podAnnotations[appcat.vshn.io/forward-events-to]
          type: CombineFromComposite
        - combine:
            strategy: string
            string:
              fmt: vshn.appcat.vshn.io/v1/VSHNRedis/%s/%s
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
              - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.values.persistence.annotations[appcat.vshn.io/forward-events-to]
          type: CombineFromComposite
        - combine:
            strategy: string
            string:
              fmt: vshn.appcat.vshn.io/v1/VSHNRedis/%s/%s
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
              - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.values.service.annotations[appcat.vshn.io/forward-events-to]
          type: CombineFromComposite
        - combine:
            strategy: string
            string:
              fmt: vshn.appcat.vshn.io/v1/VSHNRedis/%s/%s
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
              - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.values.replica.podAnnotations[appcat.vshn.io/forward-events-to]
          type: CombineFromComposite
        - combine:
            strategy: string
            string:
              fmt: vshn.appcat.vshn.io/v1/VSHNRedis/%s/%s
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
              - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.values.persistence.annotations[appcat.vshn.io/forward-events-to]
          type: CombineFromComposite
        - combine:
            strategy: string
            string:
              fmt: vshn.appcat.vshn.io/v1/VSHNRedis/%s/%s
            variables:
              - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
              - fromFieldPath: metadata.labels[crossplane.io/claim-name]
          toFieldPath: spec.forProvider.values.service.annotations[appcat.vshn.io/forward-events-to]
          type: CombineFromComposite
  writeConnectionSecretsToNamespace: syn-crossplane
