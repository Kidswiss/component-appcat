classes:
  - .common

parameters:
  pkg.appcat.composition.objectstorage.exoscale:
    secretNamespaces:
      iamkeys: syn-provider-exoscale-secrets
    bucketDeletionPolicy: DeleteAll

  appcat:
    compositions:
      "exoscale.objectbuckets.appcat.vshn.io":
        spec:
          compositeTypeRef:
            apiVersion: appcat.vshn.io/v1
            kind: XObjectBucket
          writeConnectionSecretsToNamespace: ${crossplane:namespace}
          patchSets:
            - name: annotations
              patches:
                - type: FromCompositeFieldPath
                  fromFieldPath: metadata.annotations
                  toFieldPath: metadata.annotations
            - name: labels
              patches:
                - type: FromCompositeFieldPath
                  fromFieldPath: metadata.labels
                  toFieldPath: metadata.labels
          resources:

            - base:
                apiVersion: kubernetes.crossplane.io/v1alpha1
                kind: Object
                spec:
                  managementPolicy: Observe
                  forProvider:
                    manifest:
                      apiVersion: v1
                      kind: Namespace
                      metadata: {} # patched
                  providerConfigRef:
                    name: kubernetes
              patches:
                # set which namespace to observe
                - type: FromCompositeFieldPath
                  fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
                  toFieldPath: spec.forProvider.manifest.metadata.name
                # copy the appuio organization label to a label on the XR
                - type: ToCompositeFieldPath
                  fromFieldPath: status.atProvider.manifest.metadata.labels[appuio.io/organization]
                  toFieldPath: metadata.labels[appuio.io/organization]
                # append suffix to the observer name
                - type: FromCompositeFieldPath
                  fromFieldPath: metadata.labels[crossplane.io/composite]
                  toFieldPath: metadata.name
                  transforms:
                    - type: string
                      string:
                        fmt: "%s-ns-observer"
                        type: Format

            - base:
                apiVersion: exoscale.crossplane.io/v1
                kind: IAMKey
                metadata: {} # patched
                spec:
                  forProvider:
                    keyName: "" # patched
                    # The zone is exposed as region in XRD
                    zone: "" # patched
                    services:
                      sos:
                        buckets:
                          - "" # patched
                  writeConnectionSecretToRef:
                    name: "" # patched
                    namespace: ${pkg.appcat.composition.objectstorage.exoscale:secretNamespaces:iamkeys}
                  providerConfigRef:
                    name: exoscale
              connectionDetails:
                - fromConnectionSecretKey: AWS_ACCESS_KEY_ID
                  type: FromConnectionSecretKey
                  name: AWS_ACCESS_KEY_ID
                - fromConnectionSecretKey: AWS_SECRET_ACCESS_KEY
                  type: FromConnectionSecretKey
                  name: AWS_SECRET_ACCESS_KEY
              patches:
                - type: PatchSet
                  patchSetName: annotations
                - type: PatchSet
                  patchSetName: labels
                - type: FromCompositeFieldPath
                  fromFieldPath: metadata.labels[crossplane.io/composite]
                  toFieldPath: metadata.name
                - type: FromCompositeFieldPath
                  fromFieldPath: metadata.labels[crossplane.io/composite]
                  toFieldPath: spec.writeConnectionSecretToRef.name
                # Set key name
                - type: CombineFromComposite
                  toFieldPath: spec.forProvider.keyName
                  combine:
                    variables:
                      - fromFieldPath: metadata.labels[crossplane.io/claim-namespace]
                      - fromFieldPath: metadata.labels[crossplane.io/claim-name]
                    strategy: string
                    string:
                      fmt: "%s.%s"
                # Set zone
                - type: FromCompositeFieldPath
                  fromFieldPath: spec.parameters.region
                  toFieldPath: spec.forProvider.zone
                # Set bucket
                - type: FromCompositeFieldPath
                  fromFieldPath: spec.parameters.bucketName
                  toFieldPath: spec.forProvider.services.sos.buckets[0]

            - base:
                apiVersion: exoscale.crossplane.io/v1
                kind: Bucket
                metadata: {} # patched
                spec:
                  forProvider:
                    bucketName: "" # patched
                    endpointURL: "" # patched
                    # The zone is exposed as region in XRD
                    zone: "" # patched
                    bucketDeletionPolicy: ${pkg.appcat.composition.objectstorage.exoscale:bucketDeletionPolicy}
                  providerConfigRef:
                    name: exoscale
              connectionDetails:
                - fromFieldPath: spec.forProvider.endpointURL
                  type: FromFieldPath
                  name: ENDPOINT
                - fromFieldPath: spec.forProvider.zone
                  type: FromFieldPath
                  name: AWS_REGION
                - fromFieldPath: status.atProvider.bucketName
                  type: FromFieldPath
                  name: BUCKET_NAME
              patches:
                - type: PatchSet
                  patchSetName: annotations
                - type: PatchSet
                  patchSetName: labels
                - type: FromCompositeFieldPath
                  fromFieldPath: metadata.labels[crossplane.io/composite]
                  toFieldPath: metadata.name
                - type: FromCompositeFieldPath
                  fromFieldPath: spec.parameters.bucketName
                  toFieldPath: spec.forProvider.bucketName
                # Set endpoint
                - type: FromCompositeFieldPath
                  fromFieldPath: spec.parameters.region
                  toFieldPath: spec.forProvider.endpointURL
                  transforms:
                    - type: string
                      string:
                        fmt: "sos-%s.exo.io"
                        type: Format
                # Set region
                - type: FromCompositeFieldPath
                  fromFieldPath: spec.parameters.region
                  toFieldPath: spec.forProvider.zone

    additionalResources:
      provider-exoscale-secrets-iamkeys:
        apiVersion: v1
        kind: Namespace
        metadata:
          name: ${pkg.appcat.composition.objectstorage.exoscale:secretNamespaces:iamkeys}

    secrets:
      exoscale-api-access:
        metadata:
          namespace: ${crossplane:namespace}
        stringData:
          EXOSCALE_API_KEY: '?{vaultkv:${cluster:tenant}/${cluster:name}/appcat/objectstorage/provider-exoscale/access-key}'
          EXOSCALE_API_SECRET: '?{vaultkv:${cluster:tenant}/${cluster:name}/appcat/objectstorage/provider-exoscale/secret-key}'

  crossplane:
    providerConfigs:
      exoscale:
        apiVersion: exoscale.crossplane.io/v1
        spec:
          credentials:
            source: InjectedIdentity
            apiSecretRef:
              name: exoscale-api-access
              namespace: ${crossplane:namespace}
